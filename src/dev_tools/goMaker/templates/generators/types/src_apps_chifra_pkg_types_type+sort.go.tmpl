{{if .HasSorts}}package types

type {{.Class}}Field string

// Fields in the {{.Class}} struct available for sorting.
{{.SortFields}}

// IsValid{{.Class}}Field returns true if the given field is a valid sortable {{.Class}} field.
func IsValid{{.Class}}Field(field string) bool {
	switch field {
	case {{.SortString}}:
		return true
	}
	return false
}

// {{.Class}}By returns a comparison function for sorting {{.Class}} instances by the given field.
// These comparison functions may be strung together by the Cmd{{toPlural .Class}} function.
func {{.Class}}By(field {{.Class}}Field, order SortOrder) func(p1, p2 {{.Class}}) bool {
	switch field {
{{.SortSwitches}}
	}
	panic("Should not happen in {{.Class}}By")
}

// {{.Class}}Cmp accepts a slice and variadic comparison functions and returns a functions
// that can be used to sort the slice.
func {{.Class}}Cmp(slice []{{.Class}}, orders ...func(p1, p2 {{.Class}}) bool) func(i, j int) bool {
	return func(i, j int) bool {
		p1, p2 := slice[i], slice[j]
		for _, order := range orders {
			if order(p1, p2) {
				return true
			}
			if order(p2, p1) {
				return false
			}
		}
		return false
	}
}
{{end}}
